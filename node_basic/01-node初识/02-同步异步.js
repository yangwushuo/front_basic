/*

  进程和线程
    - 进程(厂房)
      - 程序的运行环境
    - 线程(工人)
      - 线程是实际进行运算的东西

  同步
    - 通常情况代码都是自上向下一行一行的执行
    - 前边的代码不执行后边的代码也不会执行
    - 同步的代码执行会出现阻塞的情况
    - 一行代码执行慢会影响到整个程序的执行

    解决同步问题
      - java python
        - 通过多线程来解决
      - node.js
        - 通过异步方式来解决

  异步
    - 一段代码的执行不会影响到其他的程序
    - 异步的问题：
      - 一步的代码无法通过return来设置返回值
    - 特点:
      1. 不会阻塞其他代码的执行
      2. 需要通过回调函数来返回结果
    - 基于回调函数的异步带来的问题
      1. 代码的可读性差
      2. 可调试性差
    - 解决问题:
      - 需要一个东西，可以代替回调函数来给我们返回结果
      - Promise 横空出世
        -Promise 是一个可以用来存储数据对象
          Promise存储数据的方式比较特殊
          这种特殊方式使得Promise可以用来存储异步调用的数据


    现实生活举例说明
      1.点菜
      2.厨师做菜 你不可能点完菜什么都不敢傻等着做完(异步) 傻等着做完(同步)
      3.吃饭


*/

//求和函数
function sum(num1, num2, callback){
  callback(num1+num2);
}

sum(1,1,(result)=>{
  sum(result,1,(result)=>{
    sum(result,1,(result)=>{
      console.log("结果:",result);
    })
  })
});
